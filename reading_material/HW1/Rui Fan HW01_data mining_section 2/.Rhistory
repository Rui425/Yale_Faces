result <- count / N
result
count <- 0
N <- 3000
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
for (i in 1:N){
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
fit.h <- lm(y~x)
coeffi<-coef(fit.h)
vcov<-vcovHC(fit.h,type="HC3")
flag.4 <- FALSE
if (beta.1 > coeffi[2]+qnorm(0.975,0,1)*sqrt(vcov[2,2]) || beta.1 < coeffi[2]-qnorm(0.975,0,1)*sqrt(vcov[2,2])) flag.4 <- TRUE
if (flag.4) count <- count + 1
}
result <- count / N
result
count <- 0
N <- 3000
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
for (i in 1:N){
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
fit.h <- lm(y~x)
coeffi<-coef(fit.h)
vcov<-vcovHC(fit.h,type="HC3")
flag.4 <- FALSE
if (beta.1 > coeffi[2]+qnorm(0.975,0,1)*sqrt(vcov[2,2]) || beta.1 < coeffi[2]-qnorm(0.975,0,1)*sqrt(vcov[2,2])) flag.4 <- TRUE
if (flag.4) count <- count + 1
}
result <- count / N
result
count <- 0
N <- 3000
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
for (i in 1:N){
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
fit.h <- lm(y~x)
coeffi<-coef(fit.h)
vcov<-vcovHC(fit.h,type="HC3")
flag.4 <- FALSE
if (beta.1 > coeffi[2]+qnorm(0.975,0,1)*sqrt(vcov[2,2]) || beta.1 < coeffi[2]-qnorm(0.975,0,1)*sqrt(vcov[2,2])) flag.4 <- TRUE
if (flag.4) count <- count + 1
}
result <- count / N
result
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
plot(y~x)
#######################estimate model###############################
fit <- lm(y~x)
fit.w<-lm(y~x, weights=1/x^2)
crPlots(fit.w)
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
x <- runif(300,0,150)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
plot(y~x)
#######################estimate model###############################
fit <- lm(y~x)
fit.w<-lm(y~x, weights=1/x^2)
plot(fitted.values(fit.w),rstudent(fit.w))
plot(y~x)
crPlots(fit.w)
ncvTest(fit.w)
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
x <- runif(300,0,100)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
plot(y~x)
fit <- lm(y~x)
plot(res~x)
fit.w<-lm(y~x, weights=1/x^2)
plot(fitted.values(fit.w),rstudent(fit.w))
ncvTest(fit.w)
leveragePlots(fit.w)
spreadLevelPlot(fit.w)
crPlots(fit.w)
########### generate data #########
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
plot(y~x)
fit <- lm(y~x)
plot(fitted.values(fit),rstudent(fit))
fit.w<-lm(y~x, weights=1/x^2)
plot(fitted.values(fit.w),rstudent(fit.w))
ncvTest(fit.w)
crPlots(fit.w)
fit.t<-lm(y^0.1~x)
ncvTest(fit.t)
plot(fitted.values(fit.t),rstudent(fit.t))
leveragePlots(fit)
spreadLevelPlot(fit.t)
qqPlot(fit.t)
x<- 71.8
x<-76.3
y<-71.8
sx<-131.56
sy=41.25
sx<-rnorm(40,76.3,131.56)
var(sx)
sx<-rnorm(40,76.3,sqrt(131.56))
var(sx)
sx
sx<-rnorm(40,76.3,sqrt(131.56))
var(rnorm)
var(sx)
t=(x-y)/(sqrt(((1/40)+(1/60))(39*sx+59*sy)/98)
)
sx=131.56
t=(x-y)/sqrt(((1/40)+(1/60))(39*sx+59*sy)/98)
sy<-41.25
t=(x-y)/sqrt(((1/40)+(1/60))(39*sx+59*sy)/98)
sx<-131.56
t=(x-y)/sqrt(((1/40)+(1/60))(39*sx+59*sy)/98)
sqrt(4)
x<-76.3
y<-71.8
sx<-131.56
sy<-41.25
n<-40
m<-60
t=(x-y)/sqrt(((1/n)+(1/m))((n-1)*sx+(m-1)*sy)/98)
x<-76.3
y<-71.8
sx<-131.56
sy<-41.25
n<-40
m<-60
t<-(x-y)/sqrt(((1/n)+(1/m))((n-1)*sx+(m-1)*sy)/98)
x<-76.3
y<-71.8
sx<-131.56
sy<-41.25
n<-40
m<-60
x-y
sqrt(((1/n)+(1/m))((n-1)*sx+(m-1)*sy)/(m+n-2))
((1/n)+(1/m))((n-1)*sx+(m-1)*sy)/(m+n-2)
(1/n)+(1/m)
(n-1)*sx+(m-1)*sy
(m+n-2)
((1/n)+(1/m))((n-1)*sx+(m-1)*sy)
((1/n)+(1/m))
x<-76.3
y<-71.8
sx<-131.56
sy<-41.25
n<-40
m<-60
t<-(x-y)/sqrt(((1/n)+(1/m))*((n-1)*sx+(m-1)*sy)/(m+n-2))
t
?t
?t distribution
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
plot(y~x)
fit <- lm(y~x)
fit.t<-lm(y^0.1~x)
plot(fitted.values(fit.t),rstudent(fit.t))
########### generate data #########
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
plot(y~x)
plot(fitted.values(fit),rstudent(fit))
library(car)
ncvTest(fit.t)
plot(fitted.values(fit.t),rstudent(fit.t))
spreadLevelPlot(fit.t)
leveragePlots(fit)
qqPlot(fit.t)
library(MASS)
crPlots(fit.t)
############ WLS #############
fit.w<-lm(y~x, weights=1/x^2)
plot(fitted.values(fit.w),rstudent(fit.w))
cbind(coef(fit),coef(fit.w),confint(fit),confint(fit.w))
ncvTest(fit.w)
spreadLevelPlot(fit.w)
leveragePlots(fit.w)
qqPlot(fit.w)
crPlots(fit.w)
############### Sandwich correction #################
library(sandwich)
library(lmtest)
coeftest(fit, vcov=sandwich)
coef(fit)
vcovHC(fit,type="HC3")
############ only fot beta.0#######
## homogeni
count <- 0
N <- 3000
beta.0 <- 1
beta.1 <- 2.0
for (i in 1:N){
x <- runif(300,0,150)
error <- rnorm(300,0,1)
y <- beta.0 + beta.1*x + error
fit <- lm(y~x)
ci <- confint(fit)
flag.1 <- FALSE
if (beta.1 > ci[2,2] || beta.1 < ci[2,1]) flag.1 <- TRUE
if (flag.1) count <- count + 1
}
result <- count / N
result
## hetero
count <- 0
N <- 3000
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
for (i in 1:N){
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
fit <- lm(y~x)
ci <- confint(fit,level=0.95)
flag.2 <- FALSE
if (beta.1 > ci[2,2] || beta.1 < ci[2,1]) flag.2 <- TRUE
if (flag.2) count <- count + 1
}
result <- count / N
result
## WLS
count <- 0
N <- 3000
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
for (i in 1:N){
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
fit.w <- lm(y~x, weights=1/x^2)
ci.w <- confint(fit.w,level=0.95)
flag.3 <- FALSE
if (beta.1 > ci.w[2,2] || beta.1 < ci.w[2,1]) flag.3 <- TRUE
if (flag.3) count <- count + 1
}
result <- count / N
result
## H.White Sandwich
library(sandwich)
library(lmtest)
library(nlme)
count <- 0
N <- 3000
f <- function (x){
temp <- 6*x     #define your error variance function here
return(temp)
}
beta.0 <- 1
beta.1 <- 10.0
for (i in 1:N){
x <- runif(300,0,50)
error <- NULL
for (i in 1:length(x)){
temp <- rnorm(1,0,f(x[i]))
error <- c(error,temp)
}
y <- beta.0 + beta.1*x + error
fit.h <- lm(y~x)
coeffi<-coef(fit.h)
vcov<-vcovHC(fit.h,type="HC3")
flag.4 <- FALSE
if (beta.1 > coeffi[2]+qnorm(0.975,0,1)*sqrt(vcov[2,2]) || beta.1 < coeffi[2]-qnorm(0.975,0,1)*sqrt(vcov[2,2])) flag.4 <- TRUE
if (flag.4) count <- count + 1
}
result <- count / N
result
msa<-49501.250
msb/a<-7440.217+9901.250
msas<-1167.917
msbs/a<-2308.720+1119.769
dfb/a<-1.529+3
dfas<-9
dfbs/a<-13.758+27
msa<-49501.250
msba<-7440.217+9901.250
msas<-1167.917
msbsa<-2308.720+1119.769
dfba<-1.529+3
dfas<-9
dfbsa<-13.758+27
F<-msa/(msba+msas-msbsa)
Df<-(msba+msas-msbsa)^2/((msba^2/dfba)+(msas^2/dfas)+(msbsa^2/dfbsa))
F
Df
F<-msa/(msba+msas-msbsa)
Df<-(msba+msas-msbsa)^2/((msba^2/dfba)+(msas^2/dfas)+(msbsa^2/dfbsa))
F
Df
msa<-49501.250
msba<-9069.883
msas<-1167.917
msbsa<-1521.112
dfba<-1.529+3
dfas<-9
dfbsa<-13.758+27
F<-msa/(msba+msas-msbsa)
F
Df<-(msba+msas-msbsa)^2/((msba^2/dfba)+(msas^2/dfas)+(msbsa^2/dfbsa))
Df
msa<-49501.250
msba<-9069.883
msas<-1167.917
msbsa<-1521.112
dfba<-1.529+3
dfas<-9
dfbsa<-13.758+27
F<-msa/(msba+msas-msbsa)
Df<-(msba+msas-msbsa)^2/((msba^2/dfba)+(msas^2/dfas)+(msbsa^2/dfbsa))
F
Df
set.seed(123456)
set.seed
reps<-500
par.est<-matrix(NA,nrow=reps,ncol=2)
b0=0,2
b0=0.2
b1=0.5
b0<-0.2
b1<-0.5
n<-1000
x<-runif(n,-1,1)
for(i in 1:reps) {}
for(i in 1:reps) {
y<-b0+b1*x+rnorm(n,0,1)
model<-lm(y~x)
par.est[i,1]<-model$coef[1]
par.est[i,2]<-model$coef[2]
}
par.est
hist(par.est[,1])
hist(par.est[,2], breaks=25)
rnorm(50)
rnorm(50,1)
n<-rnorm(50)
mean(n)
sd(n)
?set.seed
set.seed(123)
rnorm(50)
college<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/College.csv", head=TRUE)
college<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/College.csv", head=TRUE)
college
fix(college)
college=read.csv("http://www-bcf.usc.edu/~gareth/ISL/College.csv", head=TRUE)
fix(college)
college
college
college
college<-read.csv(file.choose())
college
fix(college)
college=read.csv(file.choose())
fix(college)
college=read.csv(file.choose(),header=T)
fix(college)
names(college)
?fix
college<-read.csv(file.choose(),header=T)
names(college)
fix(college)
rownames(college)=college[,1]
fix(college)
college
fix(college)
rownames(college)=college[,1]
names(college)
college=college[,-1]
college
fix(college)
college<-read.csv(/Users/fanrui/Desktop/data mining, header=T)
college<-read.csv(Users/fanrui/Desktop/data mining, header=T)
college<-read.csv("Users/fanrui/Desktop/data mining", header=T)
college<-read.csv("College.csv", header=T)
college<-read.csv("College.csv", header=T)
college<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/College.csv", header=T)
rownames(college)=college[,1]
fix(college)
some(college)
library(car)
some(college)
fix(college)
college<-read.csv("http://www-bcf.usc.edu/~gareth/ISL/College.csv")
fix(college)
college<-read.table("http://www-bcf.usc.edu/~gareth/ISL/College.csv")
fix(college)
college<-read.csv(file.choose("College.csv"), header=T)
rownames(college)=college[,1]
fix(college)
college<-read.csv(file.choose("College.csv"),header=T)
rownames(college)=college[,1]
college<-college[-,1]
college<-college[,-1]
fix(college)
fix(college)
fox(college)
college<-read.csv(file.choose("College.csv"))
rownames(college)=college[,1]
fix(college)
data <- read.table("http://socserv.socsci.mcmaster.ca/jfox/Books/Applied-Regression-2E/datasets/Duncan.txt",header = TRUE)
fix(data)
